name: Build Binaries for Windows (VST3) and MacOS (VST3 and AU)

on:
  push:
    branches:
      - master
    tags:
      - 'release-*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup MSBuild.exe
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1.1
      with:
        vs-version: 17
    
    - name: Cache JUCE
      id: check-juce-cache
      uses: actions/cache@v3
      with:
        path: JUCE
        key: ${{ runner.os }}-juce-7.0.5

    - name: Download JUCE
      if: steps.check-juce-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          curl -LO https://github.com/juce-framework/JUCE/releases/download/7.0.5/juce-7.0.5-osx.zip
          unzip juce-7.0.5-osx.zip
        else
          curl -LO https://github.com/juce-framework/JUCE/releases/download/7.0.5/juce-7.0.5-windows.zip
          unzip juce-7.0.5-windows.zip
        fi
      
    - name: Cache FRUT directory
      id: cache-frut
      uses: actions/cache@v3
      with:
        path: FRUT
        key: ${{ runner.os }}-frut

    - name: Clone FRUT
      if: steps.cache-frut.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/McMartin/FRUT.git

    - name: Build FRUT
      if: steps.cache-frut.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "Creating build folder "
        mkdir FRUT/build

        echo "Moving to FRUT/build"
        cd FRUT/build
        
        echo "Building Jucer2CMake"
        cmake .. -DCMAKE_INSTALL_PREFIX="../compiled" -DJUCE_ROOT="../../JUCE"
        cmake --build . --target install --parallel
        
        echo "Moving to DR Filter"
        cd ../..

    - name: Generate CMakeLists.txt
      if: steps.cache-frut.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "Generate CMakeLists.txt"
        ./FRUT/compiled/FRUT/bin/Jucer2CMake reprojucer "DR Filter.jucer" ./FRUT/compiled/FRUT/cmake/Reprojucer.cmake --juce-modules=JUCE/modules

    - name: Build DR Filter
      shell: bash
      run: |
        echo "Creating Builds folder"
        mkdir Builds
        
        echo "Generate CMake for target platform"
        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          cmake -B ./Builds -G Xcode
        else
          cmake -B ./Builds -G "Visual Studio 17 2022" -A x64
        fi

        echo "Compile binaries"
        cmake --build Builds --parallel --config Release

    - name: List directory contents
      run: ls -R "Builds/"

    - name: Upload MacOS Binaries
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v3
      with:
        name: DR-Filter-MacOS
        path: |
          ./Builds/Release/DR\ Filter.vst3
          ./Builds/Release/DR\ Filter.component

    - name: Upload Windows Binaries
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: DR-Filter-Windows
        path: "Builds/Release/VST3/DR Filter.vst3"

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/release-')
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: ./artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

      - name: Upload Release Asset - MacOS
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/DR-Filter-MacOS.zip
          asset_name: DR-Filter-MacOS.zip
          asset_content_type: application/zip

      - name: Upload Release Asset - Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/DR-Filter-Windows.zip
          asset_name: DR-Filter-Windows.zip
          asset_content_type: application/zip